#!venv/bin/python
"""Main module"""

import datetime
import logging
import logging.handlers as loghandlers
import os
import sys
import threading
import time

import telebot
from telebot import types, util

import client_ops
import config
import db
import states
from models.model_users import ROLES
from states import States as st

BOT = telebot.TeleBot(config.TOKEN_BOT)


if not os.path.exists('logs'):
    os.makedirs('logs')
LOGGER = logging.getLogger('applog')
LOGGER.setLevel(logging.INFO)
formatter = logging.Formatter(
    '%(asctime)s  %(filename)s  %(funcName)s  %(lineno)d  %(name)s  %(levelname)s: %(message)s')
log_handler = loghandlers.RotatingFileHandler(
    './logs/botlog.log',
    maxBytes=1000000,
    encoding='utf-8',
    backupCount=50
)
log_handler.setLevel(logging.INFO)
log_handler.setFormatter(formatter)
LOGGER.addHandler(log_handler)
telebot.logger.setLevel(logging.INFO)
telebot.logger.addHandler(LOGGER)


@BOT.message_handler(func=lambda message: message.text == '–û—Ç–º–µ–Ω–∞')
def cancel_to_mainmenu(message):
    """–ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ –û—Ç–º–µ–Ω–∞ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    cmd_start(message)


@BOT.chat_member_handler()
def chat_member_greetings(chat_member_updated: types.ChatMemberUpdated):
    """–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –≥—Ä—É–ø–ø–∞–º–∏/–∫–∞–Ω–∞–ª–∞–º–∏, –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω–æ–º"""
    pass


@BOT.callback_query_handler(func=lambda call: True)
def inline_buttons_router(call):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    if call.message:
        key = call.data.split(';')[0]
        is_del_inline_keyb = True

        if key == 'menu_reg_start':
            menu_reg_start(call.message)
        elif key == 'menu_admin_accounts_create':
            menu_admin_accounts_create(call.message)
        elif key == 'menu_admin_accounts_authorize':
            menu_admin_accounts_authorize(call.message, call.data)
        elif key == 'menu_admin_parsegroup_select':
            menu_admin_parsegroup_select(call.message, call.data)

        if is_del_inline_keyb:
            BOT.edit_message_reply_markup(chat_id=call.message.chat.id,
                                          message_id=call.message.id, reply_markup=types.InlineKeyboardMarkup())


@BOT.message_handler(commands=['start'])
def cmd_start(message):
    """–°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º"""
    if message.chat.id < 0:  # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –∏–∑ —á–∞—Ç–∞
        return
    mainmenu(message)


def menu_reg_about(message):
    """–ò–Ω—Ñ–∞ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
    if message.from_user.last_name and message.from_user.first_name:
        fio = f'{message.from_user.last_name} {message.from_user.first_name}'
    elif message.from_user.last_name or message.from_user.first_name:
        fio = message.from_user.first_name or message.from_user.last_name
    else:
        fio = 'unknown'
    db.db_tempvals.set_tmpval(message.chat.id, st.S_REG_FIO_GET.name, textval=fio)

    keyboard_inline = types.InlineKeyboardMarkup()
    keyboard_list = []
    keyboard_list.append(types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data="menu_reg_start;1"))
    keyboard_inline.add(*keyboard_list, row_width=1)

    mes = '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
    BOT.send_message(message.chat.id, mes, reply_markup=keyboard_inline)


def menu_reg_start(message):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = db.db_users.get_user(message.chat.id)
    if user:
        BOT.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        mainmenu(message)
        return
    menu_reg_save(message)


def menu_reg_save(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    id_user = message.chat.id
    fio = db.db_tempvals.get_tmpval(id_user, st.S_REG_FIO_GET.name).textval
    nick = message.chat.username

    if db.db_users.add_new_user(id_user, fio, nick):
        BOT.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞')
        states.set_state(message.chat.id, st.S_REG_PENDING.value)
        menu_reg_pending(message)
    else:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')


@BOT.message_handler(func=lambda message: states.get_cur_state(message.chat.id) == st.S_REG_PENDING.value)
def menu_reg_pending(message):
    """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user = db.db_users.get_user(message.chat.id)
    if user and user.id_role != ROLES['pending']:
        cmd_start(message)
    else:
        keyb_items = ['–û–±–Ω–æ–≤–∏—Ç—å']
        keyboard = make_keyboard(items=keyb_items, is_with_cancel=False)
        BOT.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', reply_markup=keyboard)


def mainmenu(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = db.db_users.get_user(message.chat.id)

    if not user or user.active == 0:
        menu_reg_about(message)
        return

    if user and user.reg == 0:
        menu_reg_pending(message)
        return

    db.db_tempvals.clear_user_tempvals(message.chat.id)
    states.set_state(message.chat.id, st.S_MAINMENU.value)

    keyb_items = []
    row_width = 2

    if user.id_role == ROLES['admin']:
        keyb_items.append('–ì—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞')
        keyb_items.append('–ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        keyb_items.append('–ê–∫–∫–∞—É–Ω—Ç')

    keyboard = make_keyboard(items=keyb_items, row_width=row_width, is_with_cancel=False)
    mes = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é'

    BOT.send_message(message.chat.id, mes, reply_markup=keyboard)


@BOT.message_handler(func=lambda message: states.get_cur_state(message.chat.id) == st.S_MAINMENU.value)
def mainmenu_choice(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    choice = message.text
    user = db.db_users.get_user(message.chat.id)

    if user.id_role == ROLES['admin']:
        if choice == '–ì—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–∞':
            menu_admin_accgroups_show(message)
        elif choice == '–ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
            menu_admin_parsegroup(message)
        elif choice == '–ê–∫–∫–∞—É–Ω—Ç':
            menu_admin_accounts_show(message)


def menu_admin_accgroups_show(message):
    if not db.db_users.get_first_client_account():
        BOT.send_message(message.chat.id, '–ù–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
        return

    BOT.send_message(message.chat.id, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...')
    acc_groups_tuple = client_ops.get_acc_groups()
    if not acc_groups_tuple:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø')
        return

    common_groups_lst, admin_groups_lst, is_has_groups = acc_groups_tuple
    if not is_has_groups:
        mes = '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n–ù—É–∂–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å\n'
        BOT.send_message(message.chat.id, mes)
        return

    mes = ''

    mes += 'üî∏<b>–ì—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç:</b>\n'
    if common_groups_lst:
        for common_group_item in common_groups_lst:
            _, title_group = common_group_item
            mes += f'{title_group}\n'
    else:
        mes += '-'

    mes += '\n'

    mes += 'üî∏<b>–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–≥–¥–µ –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞):</b>\n'
    if admin_groups_lst:
        for admin_group_item in admin_groups_lst:
            _, title_group = admin_group_item
            mes += f'{title_group}\n'
    else:
        mes += '-'

    BOT.send_message(message.chat.id, mes, parse_mode='html')


def menu_admin_parsegroup(message):
    if not db.db_users.get_first_client_account():
        BOT.send_message(message.chat.id, '–ù–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')
        return

    BOT.send_message(message.chat.id, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...')
    acc_groups_tuple = client_ops.get_acc_groups()
    if not acc_groups_tuple:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø')
        return

    common_groups_lst, _, is_has_groups = acc_groups_tuple
    if not is_has_groups:
        mes = '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n–ù—É–∂–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–∞—Ä—Å–∏—Ç—å\n'
        BOT.send_message(message.chat.id, mes)
        return

    keyboard_inline = types.InlineKeyboardMarkup()
    keyboard_list = []
    for common_group_item in common_groups_lst:
        id_group, title_group = common_group_item
        keyboard_list.append(types.InlineKeyboardButton(
            text=title_group, callback_data=f"menu_admin_parsegroup_select;{id_group}"))
    keyboard_inline.add(*keyboard_list, row_width=1)

    mes = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    BOT.send_message(message.chat.id, mes, reply_markup=keyboard_inline)


def menu_admin_parsegroup_select(message, data):
    BOT.send_message(message.chat.id, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...')
    params = data.split(';')
    id_group = int(params[1])
    menu_admin_parsegroup_savemembers(message, id_group)


def menu_admin_parsegroup_savemembers(message, id_group):
    members_lst = client_ops.get_members_in_group(id_group)
    if not members_lst:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        return

    kol_new = db.db_users.add_new_members(members_lst)
    if not kol_new:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É')
        return

    mes = '–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n'
    mes += f'–í –≥—Ä—É–ø–ø–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members_lst)}\n'
    mes += f'–ò–∑ –Ω–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –≤ –±–∞–∑—É: {kol_new}'
    BOT.send_message(message.chat.id, mes)
    mainmenu(message)


def menu_admin_accounts_show(message):
    BOT.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...')
    if not client_ops.check_account_availability():
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
        return
    client_accounts_tuple = db.db_users.get_all_client_accounts()

    keyboard_inline = None
    keyboard_list = []
    mes = ''

    if client_accounts_tuple:
        for client_account in client_accounts_tuple:
            mes += f'<b>–ê–∫–∫–∞—É–Ω—Ç #{client_account.id}</b>\n'
            mes += f'api_id: {client_account.api_id}\n'
            mes += f'api_hash: {client_account.api_hash}\n'
            mes += f'—Ç–µ–ª–µ—Ñ–æ–Ω: {client_account.phone}\n\n'
            if client_account.banned == 1:
                mes += 'üî¥<b>–°—Ç–∞—Ç—É—Å:</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¢–µ–ª–µ–≥—Ä–∞–º–æ–º'
            elif client_account.active == 0:
                mes += '‚ö´<b>–°—Ç–∞—Ç—É—Å:</b> –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
            elif client_account.authorized == 0:
                mes += 'üü°<b>–°—Ç–∞—Ç—É—Å:</b> —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                keyboard_inline = types.InlineKeyboardMarkup()
                keyboard_list.append(types.InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å',
                                     callback_data=f"menu_admin_accounts_authorize;{client_account.id}"))
                keyboard_inline.add(*keyboard_list, row_width=1)
            else:
                mes += 'üü¢<b>–°—Ç–∞—Ç—É—Å:</b> –∞–∫—Ç–∏–≤–µ–Ω'
    else:
        keyboard_inline = types.InlineKeyboardMarkup()
        keyboard_list.append(types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                             callback_data="menu_admin_accounts_create;1"))
        keyboard_inline.add(*keyboard_list, row_width=1)
        mes += '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤'

    BOT.send_message(message.chat.id, mes, parse_mode='html', reply_markup=keyboard_inline)


def menu_admin_accounts_create(message):
    client_accounts_tuple = db.db_users.get_all_client_accounts()
    if client_accounts_tuple:
        BOT.send_message(message.chat.id, '–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ 1 –∞–∫–∫–∞—É–Ω—Ç')
        mainmenu(message)
        return
    menu_admin_accounts_create_api_id_ask(message)


def menu_admin_accounts_create_api_id_ask(message):
    """–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç - –∑–∞–ø—Ä–æ—Å api_id"""
    keyboard = make_keyboard(is_with_cancel=False)
    mes = '–ù–∞–ø–∏—à–∏—Ç–µ api_id'

    BOT.send_message(message.chat.id, mes, reply_markup=keyboard)
    states.set_state(message.chat.id, st.S_MENU_ADMIN_CREATEACC_API_ID_ASK.value)


@BOT.message_handler(func=lambda message: states.get_cur_state(message.chat.id) == st.S_MENU_ADMIN_CREATEACC_API_ID_ASK.value)
def menu_admin_accounts_create_api_id_save(message):
    """–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ api_id"""
    api_id = message.text
    if len(api_id) > 100:
        BOT.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π api_id')
        return
    db.db_tempvals.set_tmpval(message.chat.id, st.S_MENU_ADMIN_CREATEACC_API_ID_ASK.name, textval=api_id)
    menu_admin_accounts_create_api_hash_ask(message)


def menu_admin_accounts_create_api_hash_ask(message):
    """–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç - –∑–∞–ø—Ä–æ—Å api_hash"""
    keyboard = make_keyboard(is_with_cancel=False)
    mes = '–ù–∞–ø–∏—à–∏—Ç–µ api_hash'

    BOT.send_message(message.chat.id, mes, reply_markup=keyboard)
    states.set_state(message.chat.id, st.S_MENU_ADMIN_CREATEACC_API_HASH_ASK.value)


@BOT.message_handler(func=lambda message: states.get_cur_state(message.chat.id) == st.S_MENU_ADMIN_CREATEACC_API_HASH_ASK.value)
def menu_admin_accounts_create_api_hash_save(message):
    """–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ api_hash"""
    api_hash = message.text
    if len(api_hash) > 100:
        BOT.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π api_hash')
        return
    db.db_tempvals.set_tmpval(message.chat.id, st.S_MENU_ADMIN_CREATEACC_API_HASH_ASK.name, textval=api_hash)
    menu_admin_accounts_create_phone_ask(message)


def menu_admin_accounts_create_phone_ask(message):
    """–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç - –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = make_keyboard()
    mes = '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'

    BOT.send_message(message.chat.id, mes, reply_markup=keyboard)
    states.set_state(message.chat.id, st.S_MENU_ADMIN_CREATEACC_API_PHONE_ASK.value)


@BOT.message_handler(func=lambda message: states.get_cur_state(message.chat.id) == st.S_MENU_ADMIN_CREATEACC_API_PHONE_ASK.value)
def menu_admin_accounts_create_phone_save(message):
    """–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.replace(' ', '').replace('-', '').replace('(', '').replace(')', '').replace('+', '')
    if len(phone) > 20:
        BOT.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä')
        return
    if not str.isdigit(phone):
        BOT.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        return

    phone_str_lst = list(phone)
    if phone_str_lst[0] == '8':
        phone_str_lst[0] = '7'
    phone = "".join(phone_str_lst)
    phone = f'+{phone}'

    db.db_tempvals.set_tmpval(message.chat.id, st.S_MENU_ADMIN_CREATEACC_API_PHONE_ASK.name, textval=phone)
    menu_admin_accounts_create_save(message)


def menu_admin_accounts_create_save(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    id_user = message.chat.id
    api_id = db.db_tempvals.get_tmpval(id_user, st.S_MENU_ADMIN_CREATEACC_API_ID_ASK.name).textval
    api_hash = db.db_tempvals.get_tmpval(id_user, st.S_MENU_ADMIN_CREATEACC_API_HASH_ASK.name).textval
    phone = db.db_tempvals.get_tmpval(id_user, st.S_MENU_ADMIN_CREATEACC_API_PHONE_ASK.name).textval

    if db.db_users.add_new_client_account(api_id, api_hash, phone):
        BOT.send_message(message.chat.id, '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω')
        menu_admin_accounts_show(message)
        mainmenu(message)
    else:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')


def menu_admin_accounts_authorize(message, data):
    params = data.split(';')
    id_account = int(params[1])
    db.db_tempvals.set_tmpval(message.chat.id, st.S_MENU_ADMIN_AUTHACC_IDACCOUNT_GET.name, intval=id_account)

    if not client_ops.send_auth_code(id_account):
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        return

    menu_admin_accounts_authorize_code_ask(message)


def menu_admin_accounts_authorize_code_ask(message):
    id_account = db.db_tempvals.get_tmpval(
        message.chat.id, st.S_MENU_ADMIN_AUTHACC_IDACCOUNT_GET.name, is_delete_after_read=False).intval
    client_account_item = db.db_users.get_client_account(id_account)
    keyboard = make_keyboard(is_with_cancel=False)
    mes = f'–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à—ë–ª –Ω–∞ –Ω–æ–º–µ—Ä {client_account_item.phone}'

    BOT.send_message(message.chat.id, mes, reply_markup=keyboard)
    states.set_state(message.chat.id, st.S_MENU_ADMIN_AUTHACC_CODE_ASK.value)


@BOT.message_handler(func=lambda message: states.get_cur_state(message.chat.id) == st.S_MENU_ADMIN_AUTHACC_CODE_ASK.value)
def menu_admin_accounts_authorize_code_save(message):
    code = message.text
    if len(code) > 100:
        BOT.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥')
        return

    id_account = db.db_tempvals.get_tmpval(
        message.chat.id, st.S_MENU_ADMIN_AUTHACC_IDACCOUNT_GET.name, is_delete_after_read=False).intval
    if client_ops.authorize(id_account, code):
        BOT.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    else:
        BOT.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    mainmenu(message)


@BOT.message_handler(content_types=['text'])
def dummy_message(message):
    """–õ—é–±–∞—è –¥—Ä—É–≥–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    cmd_start(message)


def make_keyboard(items=None, row_width=1, fill_with_classifier=None, is_classifier_reverse=False, is_with_cancel=True):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_list = []

    if fill_with_classifier:
        classifier_items = db.db_classifiers.get_classifier_items(
            fill_with_classifier, is_reverse=is_classifier_reverse)
        for item in classifier_items:
            keyboard_list.append(item.name)

    if items:
        for item in items:
            keyboard_list.append(item)

    if is_with_cancel:
        keyboard_list.append('–û—Ç–º–µ–Ω–∞')

    if not items and not fill_with_classifier and not is_with_cancel:
        return types.ReplyKeyboardRemove()

    keyboard.add(*keyboard_list, row_width=row_width)
    return keyboard


def startup_actions():
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    pass


def timer_1min():
    """–¢–∞–π–º–µ—Ä –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –∫–∞–∂–¥—É—é 1 –º–∏–Ω—É—Ç—É"""
    LOGGER.info('Timer_1min thread started...')
    cycle_period = 60
    while True:
        try:
            pass

            time.sleep(cycle_period)
        except Exception as ex_tm:
            LOGGER.error(ex_tm)
            time.sleep(cycle_period)


if __name__ == '__main__':
    startup_actions()

    TIMER_1MIN_THREAD = threading.Thread(target=timer_1min)
    TIMER_1MIN_THREAD.daemon = True
    TIMER_1MIN_THREAD.start()

    try:
        BOT.infinity_polling(allowed_updates=util.update_types)
    except Exception as ex:
        LOGGER.error(ex)
        sys.exit()
